from abc import ABC, abstractmethod

class VLMModelInterface(ABC):
    """Abstract base class defining a unified interface for Vision-Language Models (VLM)"""
    
    @abstractmethod
    def load_model(self) -> None:
        """Initialize and load the model weights and necessary components"""
        pass

    @abstractmethod
    def process_instruction(self, instruction: dict) -> dict:
        """
        Convert the unified instruction format into model-specific input format
        
        Args:
            instruction: Dictionary containing the standardized input structure
            
        Returns:
            Dictionary containing model-specific formatted input
        """
        pass

    @abstractmethod
    def inference(self, processed_input: dict) -> dict:
        """
        Perform model inference on the processed input
        
        Args:
            processed_input: Model-ready input generated by process_instruction()
            
        Returns:
            Dictionary containing model output and metadata
        """
        pass


class VLMModelFactory(ABC):
    """Abstract factory interface for creating VLM model instances"""
    
    @abstractmethod
    def create_model(self, config: dict = None) -> VLMModelInterface:
        """
        Factory method to create a concrete VLM model instance
        
        Args:
            config: Optional configuration dictionary for model initialization
            
        Returns:
            Instance of a concrete VLMModelInterface implementation
        """
        pass